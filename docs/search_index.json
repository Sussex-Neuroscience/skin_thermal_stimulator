[{"path": "widget", "title": "Widget", "content": "Widget\nThis is an example page for a part that needs more information than can be provided\nin a part library. You can also add links and images into this page.\n\nSpecifications\n\n\n\nAttribute\nValue\n\n\n\n\nType\nUnknown\n\n\nQuality\nFantastic\n\n\n\nSuppliers\n\n\n\nSupplier\nPart Number\n\n\n\n\nWidget Shop\nWidget1", "breadcrumbs": null}, {"path": "index", "title": "Skin Thermal Stimulator", "content": "This is the documentation page for the Skin Thermal Stimulator. Here, readers will find all the necessary information to build, and use the device. \n<br>\nBackground:\nThis device is under development for studies in Psychology at the University of Sussex, by Prof. Zoltan Dienes and collaborators [add contact and maybe some work links?]. \nBuilding your own:\nStart by buying all the parts in the bill of materials (, ) page.\n\nbuying all parts\nmaking the enclosure\nsoldering electronics\nprepare peltier module\n\noperating the system:\n\nprepare software\n\nDocumentation to do:\n\n[ ] Review by users to gauge what is clear and what needs improving\n[ ] Add full bill of materials\n[ ] links to the PCBs that were used\n[ ] add schematic of the current electronics design", "breadcrumbs": []}, {"path": "index_BOM", "title": "Bill of Materials", "content": "Bill of Materials\nDownload this as a CSV file\nParts\n\n5 M4x10 screws \n1 Peltier element \n1 widget \n\nTools\n\n1 No. 2 Phillips screwdriver", "breadcrumbs": ["index_BOM.md"]}, {"path": "collecting_components", "title": "Using the system", "content": "<!-- There should be only one Header per page. You do not need to use all the keys -->\n\nUsing the system\n{{BUILDUPDETAILS}}\nCurrently the system relies on manual input from users to set the final temperature of the stimulator. This is done by using the Arduino-IDE and sending formatted commands using its \"serial monitor\". This will send a message to the ESP32 microcontroller, which will them perform the necessary actions for the Peltier element heat up or cool down, and for the temperature sensor to send back information to make sure the temperatures are within the expected range. \nSteps:\n\nOpen the Arduino-IDE\nSelect the correct board on the dropdown menu on the top left.\nClick the Serial monitor icon on the top right (see image below)\n\n\n<br>\n\nwith the serial monitor open, make sure \"9600 baud\" is selected on the right dropdown menu and \"New Line\" is selected on the menu next to it (see image below).  \nThese two things ensure messages going between the microcontroller and the computer are properly formatted.\n\n\n\n<br>\n\n\n\nif everything is working properly, users should see a series of messages printed in the serial monitor window, namely \"current temperature: XX C\", indicating that the ESP32 is sending information about the temperature sensor to the computer. \n\n\nto set new temperatures, users need to type a message on the text box of the serial monitor, with the following format (case-sensitive): temp 30. \n\nHere \"temp\" is the keyword expected by the ESP32 to set a new temperature. \"30\" in this case would bring the temperature at the peltier element to 30 degrees Celsius. Please note that there is a space between \"temp\" and \"30\".  \n\n\n\n\nCaution \nRemember that the peltier will very likely be attached to someone's skin! So be careful with setting the temperature. For safety reasons, we control the maximum temperature to XXXX, so that even if users mistakenly type something like \"temp 100\", the system will not allow that to happen.", "breadcrumbs": ["collecting_components.md"]}, {"path": "printing_enclosure", "title": "Printing enclosure", "content": "Printing enclosure\nThe enclosure for the electronics in this project is 3D printed. The steps needed to replicate this are below:\n\nDownload the STL files located in XXXX\nLoad the files in your slicer of choice (in the lab we are using a Bambu printer, therefore we use BambuSlicer\nPrint the design. We use PLA, with a layer height of 0.2mm and a density of 15%.\n\nWhen you are done, your enclosure should look like this:\n[ADD PHOTO OF PRINTED ENCLOSURE]", "breadcrumbs": ["printing_enclosure.md"]}, {"path": "soldering_boards", "title": "Soldering boards", "content": "Soldering boards\nPutting this system together from scratch includes soldering the electronics components to the custom printed circuit board.", "breadcrumbs": ["soldering_boards.md"]}, {"path": "prepare_peltier", "title": "Prepare peltier module", "content": "Prepare peltier module\nHeat delivery in this systems is done via the combination of a peltier element and a high precision thermistor. They need to be assembled in a specific way, so that the thermistor senses the heat and sends information to the microcontroller, which then controls the amount of power is sent to the peltier and in which direction, so that it heats/or cools down.\nTo complete this part of the build you will need the following parts and tools:\n   * Peltier element\n\nParts\n\n5 M4x10 screws \n1 Peltier element \n1 widget \n\nTools\n\n1 No. 2 Phillips screwdriver \n\n\nStep 1: Put screws into the widget\n\nGet a No. 2 Phillips screwdriver ready\nTake three M4x10 screws and screw them into the widget\n\nStep 2: Put more screws into the widget\n\nFind the screwdriver again\nTake two more M4x10 screws and screw them into the same widget", "breadcrumbs": ["prepare_peltier.md"]}, {"path": "Parts/M4x10PanSteel", "title": null, "content": "M4x10 Pan Head Steel\nThis is lots of text about some screws?\nSpecifications\n\n\n\nAttribute\nValue\n\n\n\n\nHead\nPan\n\n\nLength\n10 mm\n\n\nMaterial\nStainless Steel\n\n\nPitch\n0.7\n\n\n\nSuppliers\n\n\n\nSupplier\nPart Number\n\n\n\n\nRS\n528-817\n\n\nMcMasterCarr\n90116A207", "breadcrumbs": null}, {"path": "Parts/PeltierElement", "title": null, "content": "Peltier element\nPeltier element\nSpecifications\n\n\n\nAttribute\nValue\n\n\n\n\nLength\n40 mm\n\n\nWidth\n40 mm\n\n\nPower\n20 W\n\n\n\nSuppliers\n\n\n\nSupplier\nPart Number\n\n\n\n\nRS\nADDDSTILL", "breadcrumbs": null}, {"path": "Parts/Screwdriver_Philips_No2", "title": null, "content": "No. 2 Phillips screwdriver\nNo2 Phillips screwdriver. This is the correct size form an M4 pan head screw\nSpecifications\n\n\n\nAttribute\nValue\n\n\n\n\nDrive Size\nNo. 2", "breadcrumbs": null}, {"path": "prepare_microcontroller", "title": "Prepare microcontroller", "content": "Prepare microcontroller\n{{BUILDUPDETAILS}}\nThis system runs on a microcontroller called ESP32, specifically, the ESP32-WROOM model. \nFor this application, the microcontroller runs custom code, written in a simplified version of C++ (referred to as Arduino language). In order to use the system we require a working computer (Windows, Mac or Linux), and for the setup, access to the Internet.\n<br>\nThe steps for setting up for the first time are:\n\n\nDownload and install the Arduino Integrated Development Environment (Arduino IDE) - Follow this tutorial\n\n\nAdd, to the Arduino IDE, the board definitions for the ESP32 microcontroller - Follow this tutorial\n\nthe board definitions we are looking for are \"ESP32 by espressif (see screenshot below)\"\n\n\n\n\n\nRun the Arduino IDE for the first time and make sure it is configured properly - Follow this tutorial\n\n\nCaution \nSome window users might need to install drivers for their computers to recognised the ESP32 board properly. Please follow this tutorial\nCaution message\n\nrunning the skin thermal stimulator code on the board:\n\n\nOnce you have the microcontroller properly connected to the computer, we can download the custom code written for this project. If there are updates to the code, or users want to design their own routines, they will need to perform this step again.\n\n\nDownload the custom code from its publicly available repository\n\n\nClick on the Green \"code\" button, and then on \"download zip\" (see screenshot below). This will download a single zip file containing everything available in the repository, including our code. <br>\n\n\n\nUnzip the file, and navigate to the code folder. In it, navigate to the \"main_arduino\" folder and double click the file named \"main_arduino.ino\" (in some computers the termination \".ino\" might be omitted).\n\n\n\n\nkjsdj", "breadcrumbs": ["prepare_microcontroller.md"]}]